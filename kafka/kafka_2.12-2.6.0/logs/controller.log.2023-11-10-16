[2023-11-10 16:04:20,085] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:04:20,085] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:09:20,087] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:09:20,087] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:14:20,087] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:14:20,087] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:17:24,437] INFO [Controller id=0] New topics: [Set(mon_topic)], deleted topics: [Set()], new partition replica assignment [Map(mon_topic-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-11-10 16:17:24,438] INFO [Controller id=0] New partition creation callback for mon_topic-0 (kafka.controller.KafkaController)
[2023-11-10 16:17:24,493] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-10 16:19:20,088] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:19:20,088] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:19:20,090] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:19:20,091] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:24:20,091] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:24:20,092] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:24:20,092] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:24:20,092] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:25:01,385] DEBUG [Controller id=0] Delete topics listener fired for topics mon_topic to be deleted (kafka.controller.KafkaController)
[2023-11-10 16:25:01,388] INFO [Controller id=0] Starting topic deletion for topics mon_topic (kafka.controller.KafkaController)
[2023-11-10 16:25:01,390] INFO [Topic Deletion Manager 0] Handling deletion for topics mon_topic (kafka.controller.TopicDeletionManager)
[2023-11-10 16:25:01,392] INFO [Topic Deletion Manager 0] Deletion of topic mon_topic (re)started (kafka.controller.TopicDeletionManager)
[2023-11-10 16:25:01,459] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(mon_topic-0 -> NONE) (kafka.controller.KafkaController)
[2023-11-10 16:25:01,461] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=mon_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-11-10 16:25:01,465] INFO [Topic Deletion Manager 0] Handling deletion for topics mon_topic (kafka.controller.TopicDeletionManager)
[2023-11-10 16:25:01,493] INFO [Topic Deletion Manager 0] Deletion of topic mon_topic successfully completed (kafka.controller.TopicDeletionManager)
[2023-11-10 16:25:01,494] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2023-11-10 16:25:01,502] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-11-10 16:26:26,919] INFO [Controller id=0] New topics: [Set(mon_topic)], deleted topics: [Set()], new partition replica assignment [Map(mon_topic-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-11-10 16:26:26,919] INFO [Controller id=0] New partition creation callback for mon_topic-0 (kafka.controller.KafkaController)
[2023-11-10 16:29:20,092] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:29:20,092] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:29:20,093] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:29:20,093] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:29:40,056] DEBUG [Controller id=0] Delete topics listener fired for topics mon_topic to be deleted (kafka.controller.KafkaController)
[2023-11-10 16:29:40,057] INFO [Controller id=0] Starting topic deletion for topics mon_topic (kafka.controller.KafkaController)
[2023-11-10 16:29:40,057] INFO [Topic Deletion Manager 0] Handling deletion for topics mon_topic (kafka.controller.TopicDeletionManager)
[2023-11-10 16:29:40,057] INFO [Topic Deletion Manager 0] Deletion of topic mon_topic (re)started (kafka.controller.TopicDeletionManager)
[2023-11-10 16:29:40,072] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(mon_topic-0 -> NONE) (kafka.controller.KafkaController)
[2023-11-10 16:29:40,073] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=mon_topic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-11-10 16:29:40,073] INFO [Topic Deletion Manager 0] Handling deletion for topics mon_topic (kafka.controller.TopicDeletionManager)
[2023-11-10 16:29:40,087] INFO [Topic Deletion Manager 0] Deletion of topic mon_topic successfully completed (kafka.controller.TopicDeletionManager)
[2023-11-10 16:29:40,088] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2023-11-10 16:29:40,089] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-11-10 16:29:58,389] INFO [Controller id=0] New topics: [Set(exo1)], deleted topics: [Set()], new partition replica assignment [Map(exo1-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-11-10 16:29:58,389] INFO [Controller id=0] New partition creation callback for exo1-0 (kafka.controller.KafkaController)
[2023-11-10 16:30:04,527] INFO [Controller id=0] New topics: [Set(exo2)], deleted topics: [Set()], new partition replica assignment [Map(exo2-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-11-10 16:30:04,527] INFO [Controller id=0] New partition creation callback for exo2-0 (kafka.controller.KafkaController)
[2023-11-10 16:30:45,144] DEBUG [Controller id=0] Delete topics listener fired for topics exo2 to be deleted (kafka.controller.KafkaController)
[2023-11-10 16:30:45,144] INFO [Controller id=0] Starting topic deletion for topics exo2 (kafka.controller.KafkaController)
[2023-11-10 16:30:45,145] INFO [Topic Deletion Manager 0] Handling deletion for topics exo2 (kafka.controller.TopicDeletionManager)
[2023-11-10 16:30:45,145] INFO [Topic Deletion Manager 0] Deletion of topic exo2 (re)started (kafka.controller.TopicDeletionManager)
[2023-11-10 16:30:45,175] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(exo2-0 -> NONE) (kafka.controller.KafkaController)
[2023-11-10 16:30:45,175] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=exo2,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-11-10 16:30:45,176] INFO [Topic Deletion Manager 0] Handling deletion for topics exo2 (kafka.controller.TopicDeletionManager)
[2023-11-10 16:30:45,189] INFO [Topic Deletion Manager 0] Deletion of topic exo2 successfully completed (kafka.controller.TopicDeletionManager)
[2023-11-10 16:30:45,190] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2023-11-10 16:30:45,191] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-11-10 16:34:20,093] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:34:20,093] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:34:20,093] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:34:20,094] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:34:35,415] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2023-11-10 16:34:35,415] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2023-11-10 16:39:20,094] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:39:20,094] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:39:20,096] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:39:20,097] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:44:20,097] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:44:20,097] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:44:20,098] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:44:20,098] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:49:20,099] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:49:20,099] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:49:20,100] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:49:20,100] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:54:20,100] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:54:20,101] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:54:20,102] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:54:20,102] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-10 16:59:20,102] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-10 16:59:20,102] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-10 16:59:20,103] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2023-11-10 16:59:20,103] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
